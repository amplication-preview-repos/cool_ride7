/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TypingError as PrismaTypingError,
  TypingResult as PrismaTypingResult,
} from "@prisma/client";

export class TypingErrorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TypingErrorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.typingError.count(args);
  }

  async typingErrors(
    args: Prisma.TypingErrorFindManyArgs
  ): Promise<PrismaTypingError[]> {
    return this.prisma.typingError.findMany(args);
  }
  async typingError(
    args: Prisma.TypingErrorFindUniqueArgs
  ): Promise<PrismaTypingError | null> {
    return this.prisma.typingError.findUnique(args);
  }
  async createTypingError(
    args: Prisma.TypingErrorCreateArgs
  ): Promise<PrismaTypingError> {
    return this.prisma.typingError.create(args);
  }
  async updateTypingError(
    args: Prisma.TypingErrorUpdateArgs
  ): Promise<PrismaTypingError> {
    return this.prisma.typingError.update(args);
  }
  async deleteTypingError(
    args: Prisma.TypingErrorDeleteArgs
  ): Promise<PrismaTypingError> {
    return this.prisma.typingError.delete(args);
  }

  async getTypingResult(parentId: string): Promise<PrismaTypingResult | null> {
    return this.prisma.typingError
      .findUnique({
        where: { id: parentId },
      })
      .typingResult();
  }
}
