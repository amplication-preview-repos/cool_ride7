/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TypingError } from "./TypingError";
import { TypingErrorCountArgs } from "./TypingErrorCountArgs";
import { TypingErrorFindManyArgs } from "./TypingErrorFindManyArgs";
import { TypingErrorFindUniqueArgs } from "./TypingErrorFindUniqueArgs";
import { CreateTypingErrorArgs } from "./CreateTypingErrorArgs";
import { UpdateTypingErrorArgs } from "./UpdateTypingErrorArgs";
import { DeleteTypingErrorArgs } from "./DeleteTypingErrorArgs";
import { TypingResult } from "../../typingResult/base/TypingResult";
import { TypingErrorService } from "../typingError.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TypingError)
export class TypingErrorResolverBase {
  constructor(
    protected readonly service: TypingErrorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TypingError",
    action: "read",
    possession: "any",
  })
  async _typingErrorsMeta(
    @graphql.Args() args: TypingErrorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TypingError])
  @nestAccessControl.UseRoles({
    resource: "TypingError",
    action: "read",
    possession: "any",
  })
  async typingErrors(
    @graphql.Args() args: TypingErrorFindManyArgs
  ): Promise<TypingError[]> {
    return this.service.typingErrors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TypingError, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TypingError",
    action: "read",
    possession: "own",
  })
  async typingError(
    @graphql.Args() args: TypingErrorFindUniqueArgs
  ): Promise<TypingError | null> {
    const result = await this.service.typingError(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TypingError)
  @nestAccessControl.UseRoles({
    resource: "TypingError",
    action: "create",
    possession: "any",
  })
  async createTypingError(
    @graphql.Args() args: CreateTypingErrorArgs
  ): Promise<TypingError> {
    return await this.service.createTypingError({
      ...args,
      data: {
        ...args.data,

        typingResult: args.data.typingResult
          ? {
              connect: args.data.typingResult,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TypingError)
  @nestAccessControl.UseRoles({
    resource: "TypingError",
    action: "update",
    possession: "any",
  })
  async updateTypingError(
    @graphql.Args() args: UpdateTypingErrorArgs
  ): Promise<TypingError | null> {
    try {
      return await this.service.updateTypingError({
        ...args,
        data: {
          ...args.data,

          typingResult: args.data.typingResult
            ? {
                connect: args.data.typingResult,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TypingError)
  @nestAccessControl.UseRoles({
    resource: "TypingError",
    action: "delete",
    possession: "any",
  })
  async deleteTypingError(
    @graphql.Args() args: DeleteTypingErrorArgs
  ): Promise<TypingError | null> {
    try {
      return await this.service.deleteTypingError(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TypingResult, {
    nullable: true,
    name: "typingResult",
  })
  @nestAccessControl.UseRoles({
    resource: "TypingResult",
    action: "read",
    possession: "any",
  })
  async getTypingResult(
    @graphql.Parent() parent: TypingError
  ): Promise<TypingResult | null> {
    const result = await this.service.getTypingResult(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
