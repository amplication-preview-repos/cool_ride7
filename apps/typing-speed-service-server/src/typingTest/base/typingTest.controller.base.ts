/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TypingTestService } from "../typingTest.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TypingTestCreateInput } from "./TypingTestCreateInput";
import { TypingTest } from "./TypingTest";
import { TypingTestFindManyArgs } from "./TypingTestFindManyArgs";
import { TypingTestWhereUniqueInput } from "./TypingTestWhereUniqueInput";
import { TypingTestUpdateInput } from "./TypingTestUpdateInput";
import { TypingResultFindManyArgs } from "../../typingResult/base/TypingResultFindManyArgs";
import { TypingResult } from "../../typingResult/base/TypingResult";
import { TypingResultWhereUniqueInput } from "../../typingResult/base/TypingResultWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TypingTestControllerBase {
  constructor(
    protected readonly service: TypingTestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TypingTest })
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTypingTest(
    @common.Body() data: TypingTestCreateInput
  ): Promise<TypingTest> {
    return await this.service.createTypingTest({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TypingTest] })
  @ApiNestedQuery(TypingTestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async typingTests(@common.Req() request: Request): Promise<TypingTest[]> {
    const args = plainToClass(TypingTestFindManyArgs, request.query);
    return this.service.typingTests({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TypingTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async typingTest(
    @common.Param() params: TypingTestWhereUniqueInput
  ): Promise<TypingTest | null> {
    const result = await this.service.typingTest({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TypingTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTypingTest(
    @common.Param() params: TypingTestWhereUniqueInput,
    @common.Body() data: TypingTestUpdateInput
  ): Promise<TypingTest | null> {
    try {
      return await this.service.updateTypingTest({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TypingTest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTypingTest(
    @common.Param() params: TypingTestWhereUniqueInput
  ): Promise<TypingTest | null> {
    try {
      return await this.service.deleteTypingTest({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/typingResults")
  @ApiNestedQuery(TypingResultFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TypingResult",
    action: "read",
    possession: "any",
  })
  async findTypingResults(
    @common.Req() request: Request,
    @common.Param() params: TypingTestWhereUniqueInput
  ): Promise<TypingResult[]> {
    const query = plainToClass(TypingResultFindManyArgs, request.query);
    const results = await this.service.findTypingResults(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        wordsPerMinute: true,
        accuracy: true,

        user: {
          select: {
            id: true,
          },
        },

        typingTest: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/typingResults")
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "update",
    possession: "any",
  })
  async connectTypingResults(
    @common.Param() params: TypingTestWhereUniqueInput,
    @common.Body() body: TypingResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      typingResults: {
        connect: body,
      },
    };
    await this.service.updateTypingTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/typingResults")
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "update",
    possession: "any",
  })
  async updateTypingResults(
    @common.Param() params: TypingTestWhereUniqueInput,
    @common.Body() body: TypingResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      typingResults: {
        set: body,
      },
    };
    await this.service.updateTypingTest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/typingResults")
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "update",
    possession: "any",
  })
  async disconnectTypingResults(
    @common.Param() params: TypingTestWhereUniqueInput,
    @common.Body() body: TypingResultWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      typingResults: {
        disconnect: body,
      },
    };
    await this.service.updateTypingTest({
      where: params,
      data,
      select: { id: true },
    });
  }
}
