/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TypingResult } from "./TypingResult";
import { TypingResultCountArgs } from "./TypingResultCountArgs";
import { TypingResultFindManyArgs } from "./TypingResultFindManyArgs";
import { TypingResultFindUniqueArgs } from "./TypingResultFindUniqueArgs";
import { CreateTypingResultArgs } from "./CreateTypingResultArgs";
import { UpdateTypingResultArgs } from "./UpdateTypingResultArgs";
import { DeleteTypingResultArgs } from "./DeleteTypingResultArgs";
import { TypingErrorFindManyArgs } from "../../typingError/base/TypingErrorFindManyArgs";
import { TypingError } from "../../typingError/base/TypingError";
import { User } from "../../user/base/User";
import { TypingTest } from "../../typingTest/base/TypingTest";
import { TypingResultService } from "../typingResult.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TypingResult)
export class TypingResultResolverBase {
  constructor(
    protected readonly service: TypingResultService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TypingResult",
    action: "read",
    possession: "any",
  })
  async _typingResultsMeta(
    @graphql.Args() args: TypingResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TypingResult])
  @nestAccessControl.UseRoles({
    resource: "TypingResult",
    action: "read",
    possession: "any",
  })
  async typingResults(
    @graphql.Args() args: TypingResultFindManyArgs
  ): Promise<TypingResult[]> {
    return this.service.typingResults(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TypingResult, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TypingResult",
    action: "read",
    possession: "own",
  })
  async typingResult(
    @graphql.Args() args: TypingResultFindUniqueArgs
  ): Promise<TypingResult | null> {
    const result = await this.service.typingResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TypingResult)
  @nestAccessControl.UseRoles({
    resource: "TypingResult",
    action: "create",
    possession: "any",
  })
  async createTypingResult(
    @graphql.Args() args: CreateTypingResultArgs
  ): Promise<TypingResult> {
    return await this.service.createTypingResult({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        typingTest: args.data.typingTest
          ? {
              connect: args.data.typingTest,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TypingResult)
  @nestAccessControl.UseRoles({
    resource: "TypingResult",
    action: "update",
    possession: "any",
  })
  async updateTypingResult(
    @graphql.Args() args: UpdateTypingResultArgs
  ): Promise<TypingResult | null> {
    try {
      return await this.service.updateTypingResult({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          typingTest: args.data.typingTest
            ? {
                connect: args.data.typingTest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TypingResult)
  @nestAccessControl.UseRoles({
    resource: "TypingResult",
    action: "delete",
    possession: "any",
  })
  async deleteTypingResult(
    @graphql.Args() args: DeleteTypingResultArgs
  ): Promise<TypingResult | null> {
    try {
      return await this.service.deleteTypingResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TypingError], { name: "typingErrors" })
  @nestAccessControl.UseRoles({
    resource: "TypingError",
    action: "read",
    possession: "any",
  })
  async findTypingErrors(
    @graphql.Parent() parent: TypingResult,
    @graphql.Args() args: TypingErrorFindManyArgs
  ): Promise<TypingError[]> {
    const results = await this.service.findTypingErrors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: TypingResult): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TypingTest, {
    nullable: true,
    name: "typingTest",
  })
  @nestAccessControl.UseRoles({
    resource: "TypingTest",
    action: "read",
    possession: "any",
  })
  async getTypingTest(
    @graphql.Parent() parent: TypingResult
  ): Promise<TypingTest | null> {
    const result = await this.service.getTypingTest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
